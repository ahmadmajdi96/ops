<<<<<<< HEAD
name: Deploy to Docker Swarm

on:
  push:
    branches: [main, develop, staging]

env:
  REGISTRY: registry.cortanexai.com
  IMAGE_NAME: myapp

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Private Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    - name: Build and Push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to Swarm
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.SWARM_HOST }}
        username: root
        key: ${{ secrets.SWARM_SSH_KEY }}
        script: |
          echo "Deploying application..."
          cd /opt/swarm/apps/myapp

          # Pull latest image
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

          # Deploy stack
          docker stack deploy -c docker-compose.yml myapp --with-registry-auth

          # Cleanup old images
          docker image prune -f

    - name: Verify deployment
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.SWARM_HOST }}
        username: root
        key: ${{ secrets.SWARM_SSH_KEY }}
        script: |
          echo "Checking services..."
          docker service ls
          echo "Checking tasks..."
          docker service ps myapp_app
=======
name: Deploy FastAPI to Docker Swarm

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: ${{ secrets.REGISTRY_URL }}
  IMAGE_NAME: ${{ github.event.repository.name }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          python -m pytest

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [dev, prod]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ matrix.environment }}-${{ github.sha }}
            ${{ secrets.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ matrix.environment }}-latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-dev:
    if: github.ref == 'refs/heads/develop'
    needs: [test, build-and-push]
    runs-on: ubuntu-latest
    environment: development
    steps:
      - name: Deploy to Development
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SWARM_HOST }}
          username: root
          key: ${{ secrets.SWARM_SSH_KEY }}
          script: |
            cd /opt/swarm/apps/${{ env.IMAGE_NAME }}
            ./deploy.sh dev ${{ github.sha }}

  deploy-prod:
    if: github.ref == 'refs/heads/main'
    needs: [test, build-and-push]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Deploy to Production
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SWARM_HOST }}
          username: root
          key: ${{ secrets.SWARM_SSH_KEY }}
          script: |
            cd /opt/swarm/apps/${{ env.IMAGE_NAME }}
            ./deploy.sh prod ${{ github.sha }}
>>>>>>> 34e9938 (changing workflow)
