name: Deploy FastAPI to Docker Swarm

on:
  push:
    branches: [main, develop]

env:
  IMAGE_NAME: ${{ github.event.repository.name }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Configure Docker for insecure registry
      run: |
        echo '{"insecure-registries": ["157.180.69.112:5000"]}' | sudo tee /etc/docker/daemon.json
        sudo systemctl restart docker

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          157.180.69.112:5000/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${{ github.sha }}
          157.180.69.112:5000/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-dev:
    needs: build-and-push
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    environment: development
    steps:
    - name: Deploy to Development
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SWARM_HOST }}
        username: root
        key: ${{ secrets.SWARM_SSH_KEY }}
        script: |
          set -e
          echo "🚀 Starting deployment for development environment..."

          APP_NAME="${{ github.event.repository.name }}"
          ENVIRONMENT="dev"
          DOMAIN="dev.$APP_NAME.cortanexai.com"
          STACK_NAME="$APP_NAME-$ENVIRONMENT"

          # Create app directory
          mkdir -p /opt/swarm/apps/$APP_NAME
          cd /opt/swarm/apps/$APP_NAME

          # Create docker-compose file
          cat > docker-compose.$ENVIRONMENT.yml << DOCKERCOMPOSE
          version: '3.8'
          services:
            app:
              image: 157.180.69.112:5000/$APP_NAME:develop-latest
              deploy:
                replicas: 1
                update_config:
                  parallelism: 1
                  delay: 10s
                restart_policy:
                  condition: on-failure
              networks:
                - traefik-public
              labels:
                - "traefik.enable=true"
                - "traefik.docker.network=traefik-public"
                - "traefik.http.services.$STACK_NAME.loadbalancer.server.port=8000"
                - "traefik.http.routers.$STACK_NAME.rule=Host(\`$DOMAIN\`)"
                - "traefik.http.routers.$STACK_NAME.entrypoints=web"
          networks:
            traefik-public:
              external: true
          DOCKERCOMPOSE

          # Deploy stack
          docker stack deploy -c docker-compose.$ENVIRONMENT.yml $STACK_NAME --with-registry-auth

          echo "⏳ Waiting for service to start..."
          sleep 30

          echo "✅ Deployment completed for $DOMAIN"
          echo "🌐 Access your app at: http://$DOMAIN"

  deploy-prod:
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    steps:
    - name: Deploy to Production
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SWARM_HOST }}
        username: root
        key: ${{ secrets.SWARM_SSH_KEY }}
        script: |
          set -e
          echo "🚀 Starting deployment for PRODUCTION environment..."

          APP_NAME="${{ github.event.repository.name }}"
          ENVIRONMENT="prod"
          DOMAIN="$APP_NAME.cortanexai.com"
          STACK_NAME="$APP_NAME-$ENVIRONMENT"

          # Create app directory
          mkdir -p /opt/swarm/apps/$APP_NAME
          cd /opt/swarm/apps/$APP_NAME

          # Create docker-compose file
          cat > docker-compose.$ENVIRONMENT.yml << DOCKERCOMPOSE
          version: '3.8'
          services:
            app:
              image: 157.180.69.112:5000/$APP_NAME:main-latest
              deploy:
                replicas: 2
                update_config:
                  parallelism: 1
                  delay: 30s
                restart_policy:
                  condition: on-failure
              networks:
                - traefik-public
              labels:
                - "traefik.enable=true"
                - "traefik.docker.network=traefik-public"
                - "traefik.http.services.$STACK_NAME.loadbalancer.server.port=8000"
                - "traefik.http.routers.$STACK_NAME.rule=Host(\`$DOMAIN\`)"
                - "traefik.http.routers.$STACK_NAME.entrypoints=web"
          networks:
            traefik-public:
              external: true
          DOCKERCOMPOSE

          # Deploy stack
          docker stack deploy -c docker-compose.$ENVIRONMENT.yml $STACK_NAME --with-registry-auth

          echo "⏳ Waiting for service to start..."
          sleep 30

          echo "✅ PRODUCTION deployment completed for $DOMAIN"
          echo "🌐 Access your app at: http://$DOMAIN"